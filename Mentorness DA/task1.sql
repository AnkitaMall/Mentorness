-- missing data from the tables

SELECT * 
FROM inventory_inventory 
WHERE Store_ID IS NULL OR Product_ID IS NULL OR Stock_On_Hand IS NULL;

SELECT * 
FROM sales 
WHERE Sale_ID IS NULL OR Date IS NULL OR Store_ID IS NULL OR Product_ID IS NULL OR Units IS NULL;

SELECT * 
FROM products_products
WHERE Product_ID IS NULL OR Product_Name IS NULL OR Product_Category IS NULL OR Product_Cost IS NULL OR Product_Price IS NULL;

SELECT * 
FROM stores_stores
WHERE Store_ID IS NULL OR Store_Name IS NULL OR Store_City IS NULL OR Store_Location IS NULL OR Store_Open_Date IS NULL;

-- check duplicates in tables

SELECT Sale_ID, COUNT(*)
FROM sales
GROUP BY Sale_ID
HAVING COUNT(*) > 1;

SELECT Store_ID, Product_ID, COUNT(*)
FROM inventory_inventory
GROUP BY Store_ID, Product_ID
HAVING COUNT(*) > 1;

SELECT Product_ID, COUNT(*)
FROM products_products
GROUP BY Product_ID
HAVING COUNT(*) > 1;

SELECT Store_ID, COUNT(*)
FROM stores_stores
GROUP BY Store_ID
HAVING COUNT(*) > 1;

-- consistent datatype

SET SQL_SAFE_UPDATES = 0;
UPDATE products_products
SET Product_Price = REPLACE(Product_Price, '$', ''),
    Product_Cost = REPLACE(Product_Cost, '$', '');
SET SQL_SAFE_UPDATES = 1;

SELECT Product_ID, Product_Name, 
       CAST(Product_Price AS DECIMAL(10,0)) AS Numeric_Price, 
       CAST(Product_Cost AS DECIMAL(10,0)) AS Numeric_Cost
FROM products_products;

-- change date format

SET SQL_SAFE_UPDATES = 0;
UPDATE sales
SET Date = STR_TO_DATE(Date, '%Y-%m-%d');
SET SQL_SAFE_UPDATES = 1;


SET SQL_SAFE_UPDATES = 0;
UPDATE stores_stores
SET Store_Open_Date = STR_TO_DATE(Store_Open_Date, '%Y-%m-%d');
SET SQL_SAFE_UPDATES = 1;

-- Tasks

-- 1. What is the total sales revenue generated by each store?
SELECT st.Store_ID, st.Store_Name, round(sum(s.Units * p.Product_Price),2) AS Total_Sales_Revenue
FROM sales s
JOIN products_products p ON s.Product_ID = p.Product_ID
JOIN stores_stores st ON s.Store_ID = st.Store_ID
GROUP BY st.Store_ID, st.Store_Name
ORDER BY Total_Sales_Revenue DESC;


-- 2. Which products are the top-selling in terms of units sold?
select p.Product_ID, p.Product_Name , sum(sales.Units ) as total_unit_sold
from products_products as p
join sales on sales.Product_ID = p.Product_ID 
group by  p.Product_ID,  p.Product_Name
order by total_unit_sold  desc;


-- 3. What is the sales performance by product category?
select p.Product_Category, sum(sales.Units) as total_units_sold, round(sum(sales.Units * p.Product_Price),2) AS Total_Sales_Revenue
from products_products as p
join sales on sales.Product_ID = p.Product_ID
group by  p.Product_Category
order by Total_Sales_Revenue desc; 

-- 4. What are the current inventory levels for each product at each store?
select s.Store_ID, s.Store_Name, p.Product_ID, p.Product_Name, t.Stock_On_Hand as current_inventory
from products_products as p
join inventory_inventory as t on t.Product_ID = p.Product_ID
join stores_stores as s on s.Store_ID = t.Product_ID
order by current_inventory desc;

-- 5.How do monthly sales trends vary across different stores?
SELECT st.Store_ID, st.Store_Name,
    DATE_FORMAT(s.Date, '%Y-%m') AS Month_Year,
   round(SUM(s.Units * p.Product_Price),2) AS Total_Sales_Revenue
FROM sales s
JOIN stores_stores st ON st.Store_ID = s.Store_ID
JOIN products_products p ON s.Product_ID = p.Product_ID
GROUP BY st.Store_ID, st.Store_Name, Month_Year
ORDER BY st.Store_ID, Month_Year;

-- 6.Which stores have the highest and lowest sales performance?
SELECT s.Store_ID, s.Store_Name,
    round(SUM(sa.Units * p.Product_Price),2) AS Total_Sales_Revenue
FROM sales sa
JOIN stores_stores s ON sa.Store_ID = s.Store_ID
JOIN products_products p ON sa.Product_ID = p.Product_ID
GROUP BY s.Store_ID, s.Store_Name
ORDER BY Total_Sales_Revenue DESC;

-- 7. What is the profit margin for each product?
SELECT Product_ID, Product_Name, Product_Price AS Selling_Price, Product_Cost AS Cost_Price,
   round(((Product_Price - Product_Cost) / Product_Price) * 100 ,2) AS Profit_Margin
FROM products_products;

-- 8.How are sales distributed across different cities?
SELECT st.Store_City, round(SUM(sa.Units * p.Product_Price),2) AS Total_Sales_Revenue
FROM sales sa
JOIN stores_stores st ON sa.Store_ID = st.Store_ID
JOIN products_products p ON sa.Product_ID = p.Product_ID
GROUP BY st.Store_City
ORDER BY Total_Sales_Revenue DESC;

-- 9.Which products are out of stock in each store?
SELECT s.Store_Name, p.Product_Name, i.Stock_On_Hand
FROM inventory_inventory i
JOIN stores_stores s ON i.Store_ID = s.Store_ID
JOIN products_products p ON i.Product_ID = p.Product_ID
WHERE i.Stock_On_Hand <= 0;

-- 10.How do sales vary by specific dates?
SELECT sa.Date, 
   round( SUM(sa.Units * p.Product_Price),2) AS Total_Sales_Revenue,
    SUM(sa.Units) AS Total_Units_Sold
FROM sales sa
JOIN products_products p ON sa.Product_ID = p.Product_ID
GROUP BY sa.Date
ORDER BY sa.Date ASC;

-- 11.What is the average cost of products in each category?
SELECT Product_Category, round(AVG(Product_Cost),2) AS Average_Cost
FROM products_products
GROUP BY Product_Category;

-- 12.What is the sales growth over time for the entire company?
SELECT 
    DATE_FORMAT(sa.Date, '%Y-%m') AS Month,  
    SUM(sa.Units * p.Product_Price) AS Total_Sales_Revenue,
    LAG(SUM(sa.Units * p.Product_Price)) OVER (ORDER BY DATE_FORMAT(sa.Date, '%Y-%m')) AS Previous_Month_Sales,
    CASE 
        WHEN LAG(SUM(sa.Units * p.Product_Price)) OVER (ORDER BY DATE_FORMAT(sa.Date, '%Y-%m')) IS NOT NULL 
        THEN ((SUM(sa.Units * p.Product_Price) - LAG(SUM(sa.Units * p.Product_Price)) OVER (ORDER BY DATE_FORMAT(sa.Date, '%Y-%m'))) 
              / LAG(SUM(sa.Units * p.Product_Price)) OVER (ORDER BY DATE_FORMAT(sa.Date, '%Y-%m'))) * 100 
        ELSE NULL 
    END AS Sales_Growth_Percentage
FROM sales sa
JOIN products_products p ON sa.Product_ID = p.Product_ID
GROUP BY DATE_FORMAT(sa.Date, '%Y-%m')
ORDER BY Month ASC;

-- 13.How does the store open date affect sales performance?
SELECT s.Store_ID, s.Store_Name, s.Store_Open_Date, round(SUM(sa.Units * p.Product_Price),2) AS Total_Sales_Revenue
FROM sales sa
JOIN products_products p ON sa.Product_ID = p.Product_ID
JOIN stores_stores s ON sa.Store_ID = s.Store_ID
GROUP BY s.Store_ID, s.Store_Name, s.Store_Open_Date
ORDER BY s.Store_Open_Date;

-- 14.What percentage of total sales does each store contribute?

WITH Total_Sales AS (
    SELECT SUM(sa.Units * p.Product_Price) AS Total_Sales_Revenue
    FROM sales sa
    JOIN products_products p ON sa.Product_ID = p.Product_ID
),

-- Calculate the sales revenue for each store
Store_Sales AS (
    SELECT s.Store_ID, s.Store_Name, round(SUM(sa.Units * p.Product_Price),2) AS Store_Sales_Revenue
    FROM sales sa
    JOIN products_products p ON sa.Product_ID = p.Product_ID
    JOIN stores_stores s ON sa.Store_ID = s.Store_ID
    GROUP BY s.Store_ID, s.Store_Name
)

-- Compute the percentage contribution of each store's sales revenue to the total sales revenue
SELECT st.Store_ID, st.Store_Name, st.Store_Sales_Revenue,
  round((st.Store_Sales_Revenue / ts.Total_Sales_Revenue) * 100 ,2)AS Percentage_Contribution
FROM Store_Sales st
JOIN Total_Sales ts
ON 1=1  -- Cartesian join to include total sales revenue for calculation
ORDER BY Percentage_Contribution DESC;


-- 15.How do sales compare to current stock levels for each product?

-- Calculate total units sold for each product
WITH Total_Sales AS (
    SELECT sa.Product_ID, p.Product_Name, SUM(sa.Units) AS Total_Units_Sold
    FROM sales sa
    JOIN products_products p ON sa.Product_ID = p.Product_ID
    GROUP BY sa.Product_ID, p.Product_Name
),

-- Retrieve current stock levels for each product
Current_Stock AS (
    SELECT i.Product_ID, p.Product_Name,
        SUM(i.Stock_On_Hand) AS Current_Stock_Level
    FROM inventory_inventory i
    JOIN products_products p ON i.Product_ID = p.Product_ID
    GROUP BY i.Product_ID, p.Product_Name
)

-- Compare sales to current stock levels
SELECT cs.Product_ID, cs.Product_Name,
    COALESCE(ts.Total_Units_Sold, 0) AS Total_Units_Sold, cs.Current_Stock_Level,
    CASE
        WHEN cs.Current_Stock_Level > 0 THEN 
            (COALESCE(ts.Total_Units_Sold, 0) / cs.Current_Stock_Level) * 100
        ELSE NULL
    END AS Sales_To_Stock_Ratio_Percentage
FROM Current_Stock cs
LEFT JOIN Total_Sales ts ON cs.Product_ID = ts.Product_ID
ORDER BY cs.Product_Name;







    


    






















